version: v1-draft
exports:
  reflectJsonObject:
    description: |
      This function takes a KitchenSinkObject and returns a KitchenSinkObject.
      It should come out the same way it came in.
    codeSamples:
      - lang: typescript
        source: |
          // pass this through the host function and return it back
          return reflectJsonObjectHost(input)
      - lang: go
        source: |-
          reflect, err := ReflectJsonObjectHost(input)
          if err != nil {
            return input, err
          }

          return *reflect, err
      - lang: csharp
        source: |-
          return Host.ReflectJsonObjectHost(input);
      - lang: zig
        source: |
          return Host.reflectJsonObjectHost(input);
      - lang: rust
        source: |
          pdk::reflect_json_object_host(_input)
    input:
      contentType: application/json
      $ref: "#/components/schemas/KitchenSinkObject"
    output:
      contentType: application/json
      $ref: "#/components/schemas/KitchenSinkObject"
  reflectUtf8String:
    description: |
      This function takes a string and returns it.
      Should come out the same way it came in.
    codeSamples:
      - lang: typescript
        source: |
          return reflectUtf8StringHost(input)
      - lang: go
        source: |-
          reflect, err := ReflectUtf8StringHost(input)
          if err != nil {
            return "", err
          }

          return *reflect, nil
      - lang: csharp
        source: |-
          return Host.ReflectUtf8StringHost(input);
      - lang: zig
        source: |
          return Host.reflectUtf8StringHost(input);
      - lang: rust
        source: |
          pdk::reflect_utf8_string_host(_input)
    input:
      type: string
      description: The input string
      contentType: text/plain; charset=utf-8
    output:
      type: string
      description: The output string
      contentType: text/plain; charset=utf-8
  reflectByteBuffer:
    description: |
      This function takes a byte buffer and returns it.
      Should come out the same way it came in.
    codeSamples:
      - lang: typescript
        source: |
          return reflectByteBufferHost(input)
      - lang: go
        source: |-
          reflect, err := ReflectByteBufferHost(input)
          if err != nil {
            return nil, err
          }

          return reflect, nil
      - lang: csharp
        source: |-
          return Host.ReflectByteBufferHost(input);
      - lang: zig
        source: |
          return Host.reflectByteBufferHost(input);
      - lang: rust
        source: |
          pdk::reflect_byte_buffer_host(_input)
    input:
      contentType: application/x-binary
      type: buffer
      description: The input byte buffer
    output:
      contentType: application/x-binary
      type: buffer
      description: The output byte buffer

  noInputWithOutput:
    description: a function that takes no input, but returns an output
    output:
      contentType: text/plain; charset=utf-8
      type: string
    codeSamples:
      - lang: typescript
        source: |
          return noInputWithOutputHost();
      - lang: zig
        source: |-
          return Host.noInputWithOutputHost();
      - lang: go
        source: |
          output, err := NoInputWithOutputHost()
          if err != nil {
            return *output, err
          }

          return *output, nil
      - lang: rust
        source: |
          pdk::no_input_with_output_host()
      - lang: csharp
        source: |-
          return Host.NoInputWithOutputHost();

  withInputNoOutput:
    description: a function that takes input, but returns no output
    input:
      contentType: application/json
      type: number
    codeSamples:
      - lang: typescript
        source: |
          return withInputNoOutputHost(input);
      - lang: zig
        source: |-
          return Host.withInputNoOutputHost(input);
      - lang: go
        source: |
          err := WithInputNoOutputHost(input)
          if err != nil {
            return err
          }
          return nil
      - lang: rust
        source: |
          pdk::with_input_no_output_host(_input)
      - lang: csharp
        source: |-
          Host.WithInputNoOutputHost(input);

  noInputNoOutput:
    description: a function that takes no input, and returns no output
    codeSamples:
      - lang: typescript
        source: |-
          noInputNoOutputHost();
      - lang: zig
        source: |-
          return Host.noInputNoOutputHost();
      - lang: go
        source: |
          return NoInputNoOutputHost()
      - lang: rust
        source: |
          pdk::no_input_no_output_host()
      - lang: csharp
        source: |-
          Host.NoInputNoOutputHost();
  
  helloToGoodbyeReplacement:
    description: a function that should replace `Hello` with `Goodbye` within a byte buffer field on KitchenSinkObject
    input:
      contentType: application/json
      $ref: "#/components/schemas/KitchenSinkObject"
    output:
      contentType: application/json
      $ref: "#/components/schemas/KitchenSinkObject"
    codeSamples:
      - lang: go
        source: |-
          old := []byte("Hello")
          new := []byte("Goodbye")
          input.ABuffer = append(new, input.ABuffer[len(old):]...)

          return input, nil
      - lang: csharp
        source: |-
          var buffer = System.Text.Encoding.UTF8.GetString(input.ABuffer);
          buffer = buffer.Replace("Hello", "Goodbye");
          input.ABuffer = System.Text.Encoding.UTF8.GetBytes(buffer);
          return input;

imports:
  reflectJsonObjectHost:
    description: |
      This function takes a KitchenSinkObject and returns a KitchenSinkObject.
      It should come out the same way it came in. It's the same as the export.
      But the export should call this.
    input:
      contentType: application/json
      $ref: "#/components/schemas/KitchenSinkObject"
    output:
      contentType: application/json
      $ref: "#/components/schemas/KitchenSinkObject"
  reflectUtf8StringHost:
    description: |
      This function takes a string and returns it.
      Should come out the same way it came in. Same as export.
    input:
      type: string
      description: The input string
      contentType: text/plain; charset=utf-8
    output:
      type: string
      description: The output string
      contentType: text/plain; charset=utf-8
  reflectByteBufferHost:
    description: |
      This function takes a bugger and returns it.
      Should come out the same way it came in. Same as export.
    input:
      contentType: application/x-binary
      type: buffer
      description: The input byte buffer
    output:
      contentType: application/x-binary
      type: buffer
      description: The output byte buffer

  noInputWithOutputHost:
    description: a function that takes no input, but returns an output
    output:
      contentType: text/plain; charset=utf-8
      type: string

  withInputNoOutputHost:
    description: a function that takes input, but returns no output
    input:
      contentType: application/json
      type: number

  noInputNoOutputHost:
    description: a function that takes no input, and returns no output

components:
  schemas:
    EmbeddedObject:
      description: An embedded object, has some arrays too
      properties:
        aBoolArray:
          description: an array of bools
          type: array
          items:
            type: boolean
        aStringArray:
          description: an array of strings
          type: array
          items:
            type: string
        anEnumArray:
          description: an array of enums
          type: array
          items:
            $ref: "#/components/schemas/AStringEnum"
        anIntArray:
          description: an array of enums
          type: array
          items:
            type: integer
        aDate:
          description: a date
          type: string
          format: date-time
    AStringEnum:
      description: A string enum
      type: string
      enum:
        - option1
        - option2
        - option3
    KitchenSinkObject:
      description: A json object with every type of property
      properties:
        anOptionalString:
          type: string
          description: A string but not required
          nullable: true
        aString:
          type: string
          description: A String
        anInt:
          type: integer
          description: An Integer
        aFloat:
          type: number
          format: float
          description: A Float
        aDouble:
          type: number
          format: double
          description: A Double
        aBool:
          type: boolean
          description: A Boolean
        anUntypedObject:
          type: object
          description: An untyped object
        anEnum:
          description: A string enum (prop comment)
          $ref: "#/components/schemas/AStringEnum"
        anEmbeddedObject:
          description: A embedded object array(prop comment)
          $ref: "#/components/schemas/EmbeddedObject"
        anEmbeddedObjectArray:
          description: A embedded object array (prop comment)
          type: array
          items:
            $ref: "#/components/schemas/EmbeddedObject"
        aDate:
          description: a date
          type: string
          format: date-time
        aBuffer:
          description: a byte buffer
          type: buffer